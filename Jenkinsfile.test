pipeline {
  agent {
    kubernetes {

      label 'bloom-vault-agent-00008'
      defaultContainer 'jnlp'
      yaml """
apiVersion: v1
kind: Pod
metadata:
labels:
  component: ci
spec:
  serviceAccountName: jenkins
  containers:
  - name: ubuntu
    image: ubuntu:20.04
    command:
    - cat
    tty: true
    volumeMounts:
    - mountPath: /var/run/docker.sock
      name: docker-sock
  volumes:
    - name: docker-sock
      hostPath:
        path: /var/run/docker.sock
"""
    }
  }
  // NOT ALL ARE USED CURRENTLY
  environment {
    DOCKER_ACCT    = "hellobloom"                       // Dockerhub  account
    REPO_NAME      = 'bloom-vault'                       // Dockerhub image name
    DOCKER_IMAGE   = "${DOCKER_ACCT}/${REPO_NAME}"       // Dockerhub image
    CHARTS_REPO    = 'bloom-charts'                      // Dockerhub image name
    DOCKERHUB_ID   = 'dockerhub-creds'                   // Dockerhub credentials
    SSH_KEY        = credentials('bloom-vault-ssh-key')  // Bloom Vault ssh key
    NPMRC          = credentials('bloom-vault-npmrc')    // NPM token
    DOCKER_ARG     = "-q --build-arg SSH_KEY=${SSH_KEY} --build-arg NPMRC=${NPMRC} -f Dockerfile ."
    SLACK_CHAN     = '#jenkins-dev'
  }
  stages {
    stage('Test') {
      steps {
        container('ubuntu') {
          sh """
            ls -al

            echo "Setting DEBIAN_FRONTEND to noninteractive for zero interaction while installing or upgrading the system via apt"
            export DEBIAN_FRONTEND="noninteractive"

            echo "Installing base dependencies"
            apt -y update
            apt -y install curl


            echo "Installing Node 10"
            # https://github.com/nodesource/distributions/blob/master/README.md
            curl -sL https://deb.nodesource.com/setup_10.x | bash -
            apt -y install nodejs

            echo "Node / NPM Versions"
            node -v
            npm -v

            echo "Installing docker"
            # https://cwiki.apache.org/confluence/pages/viewpage.action?pageId=94798094
            apt -y install apt-transport-https ca-certificates curl software-properties-common
            curl -fsSL https://download.docker.com/linux/ubuntu/gpg | apt-key add -
            add-apt-repository  "deb [arch=amd64] https://download.docker.com/linux/ubuntu  \$(lsb_release -cs) stable"
            apt -y update
            apt -y install docker-ce
            service docker start
            docker -v

            echo "Installing docker-compose"
            curl -L https://github.com/docker/compose/releases/download/1.17.0/docker-compose-`uname -s`-`uname -m` -o /usr/local/bin/docker-compose
            chmod +x /usr/local/bin/docker-compose
            docker-compose -v

            echo "Installing postgres"
            apt -y install postgresql postgresql-contrib
            psql --version

            echo "Running npm ci && ./bin/test.sh"
            npm ci
            ./bin/test.sh
          """
        }
      }
    }
  }
  post {
    success {
      slackSend channel: "${SLACK_CHAN}",
                color: 'good',
                message: "Pipeline ${currentBuild.fullDisplayName} success. ${DOCKER_IMAGE}:${GIT_COMMIT}"
    }
    unstable {
      slackSend channel: "${SLACK_CHAN}",
                color: 'warning',
                message: "Pipeline ${currentBuild.fullDisplayName} unstable. ${DOCKER_IMAGE}:${GIT_COMMIT}"
    }
    unsuccessful {
      slackSend channel: "${SLACK_CHAN}",
                color: 'danger',
                message: "Pipeline ${currentBuild.fullDisplayName} unsuccessful. ${DOCKER_IMAGE}:${GIT_COMMIT}"
    }
  }
}
