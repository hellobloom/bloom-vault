pipeline {
  agent {
    kubernetes {
      label 'bloom-vault-agent-00004'
      defaultContainer 'jnlp'
      yaml """
apiVersion: v1
kind: Pod
metadata:
labels:
  component: ci
spec:
  serviceAccountName: jenkins
  containers:
  - name: docker
    image: docker:latest
    command:
    - cat
    tty: true
    volumeMounts:
    - mountPath: /var/run/docker.sock
      name: docker-sock
  volumes:
    - name: docker-sock
      hostPath:
        path: /var/run/docker.sock
"""
    }
  }
  environment {
    //DOCKER_ACCT      = "hellobloom"                // Dockerhub account
    DOCKER_ACCT      = 'rcompos'                   // *** TEST REPO  ***
    IMAGE_NAME       = 'bloom-vault'               // Dockerhub image name
    DOCKER_IMAGE     = "$DOCKER_ACCT/$IMAGE_NAME"  // Dockerhub image
    DOCKERHUB_ID     = 'dockerhub-creds'           // Dockerhub credentials
    SSH_KEY          = credentials('bloom-vault-ssh-key')  // Bloom Vault ssh key
    NPMRC            = credentials('bloom-vault-npmrc')    // NPM token
  }
  parameters {
    booleanParam(name: 'DEBUG', defaultValue: false, description: 'Debuggin mode')
  }
  stages {
    stage( 'Pre' ) {
      steps {
        container('docker') {
          sh """
            echo "Installing dependencies"
            if $DEBUG; then
              echo "###  DEBUGGIN MODE  ###"
              printenv
              ls -AlF ..
            fi
          """
        }
      }
    }
//    stage('Build') {
//      steps {
//        container('docker') {
//          script {
//            docker.withRegistry('', DOCKERHUB_ID) {
//              sh """
//                #ls -AlF
//                docker build -q -f Dockerfile . --build-arg SSH_KEY=$SSH_KEY --build-arg NPMRC=$NPMRC -t ${DOCKER_IMAGE}:$GIT_COMMIT
//                docker tag $DOCKER_IMAGE:$GIT_COMMIT $DOCKER_IMAGE
//                docker version
//                if $DEBUG; then
//                  ls -AlF
//                fi
//              """
//            }
//          }
//          //script {
//          //  dockerImage = docker.build registry + ":$BUILD_NUMBER"
//          //}
//        }
//      }
//    }
    stage('Docker Image Build and Push') {
      steps {
        container('docker') { 
          script {
            docker.withRegistry('', DOCKERHUB_ID) {
              //def dockerImage = docker.build("${DOCKER_IMAGE}:${GIT_COMMIT}")
              def dockerImage = docker.build(
                "${DOCKER_IMAGE}:${GIT_COMMIT}",
                "-q --build-arg SSH_KEY=${SSH_KEY} --build-arg NPMRC=${NPMRC} -f Dockerfile ."
              )
              dockerImage.push()
              dockerImage.push('latest')
            }
          }
        }
      }
    }
  }
}
  //post {
  //  unsuccessful {
  //    container('docker') { 
  //      sh("echo Unsuccessful")
  //    }
  //  }
  //}